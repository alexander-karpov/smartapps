from functools import lru_cache
from typing import Optional
from dialoger import Dialog, TextReply, Voice, DialogAPI
from enrichment import add_random_adjective
from morphy import by_gender, inflect
from stories.story import Story


class AtLessonStory(Story):
    """
    –ù–∞ –ø–∞—Ä–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:
    - –†–µ–±—è—Ç–∞, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–æ–ª—å—à–∞—è –ø—É—Å—Ç—ã–Ω—è –≤ –ê—Ñ—Ä–∏–∫–µ?
    - –°–∞—Ö–∞—Ä–∞! - –æ—Ç–≤–µ—á–∞–µ—Ç –æ–¥–∏–Ω –º–∞–ª—å—á–∏–∫.
    - –û—Ç–ª–∏—á–Ω–æ, –∞ –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –≥–ª—É–±–æ–∫–∞—è –±–µ–∑–¥–Ω–∞ –≤ –æ–∫–µ–∞–Ω–µ?
    - –ë–µ—Ä–º—É–¥—Å–∫–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫! - –æ—Ç–≤–µ—á–∞–µ—Ç –¥—Ä—É–≥–æ–π.
    - –ù–µ–µ–µ–µ—Ç, - –≥–æ–≤–æ—Ä–∏—Ç —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞, - —ç—Ç–æ –Ω–µ –±–µ–∑–¥–Ω–∞, –∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ.
    –ù–∞ —ç—Ç–æ –º–∞–ª—å—á–∏–∫ –≤ —Ç—Ä–µ—Ç—å–µ–º —Ä—è–¥—É –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ –≤–æ—Å–∫–ª–∏—Ü–∞–µ—Ç:
    - –ê, —è –∑–Ω–∞—é! –ö—Ä–µ–º–ª–µ–≤—Å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞—Ñ!
    –í—Å–µ –∫–ª–∞—Å—Å —Ä–∞—Å—Å–º–µ—è–ª—Å—è, –∞ —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –ø–æ–Ω—è–ª–∞, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –∏–º –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑.
    """

    _name: str
    _fruit: str

    def create_steps(self):
        return [
            self.make_step("–ù–∞–∑–æ–≤–∏ –∏–º—è —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –∏–ª–∏ –∑–Ω–∞–∫–æ–º–æ–≥–æ", self._fill_name),
            self.make_step("–ù–∞–∑–æ–≤–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å—ä–µ–¥–æ–±–Ω–æ–µ", self._fill_fruit),
            self._tell_story,
        ]

    async def _fill_fruit(self) -> bool:
        entities = self._api.input().entities()

        if entities:
            fruit = entities[0].nomn
            self._fruit = await add_random_adjective(fruit, "nomn")

            return True

        return False

    async def _fill_name(self) -> bool:
        i = self._api.input()
        name = i.first_name or i.last_name

        if name:
            self._name = name

        return bool(self._name)

    def _tell_story(self) -> None:
        self._api.say(
            "–í–æ—Ç –æ–¥–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è.",
            "–û–¥–Ω–∞–∂–¥—ã –Ω–∞ —É—Ä–æ–∫–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å:",
            "- –†–µ–±—è—Ç–∞,",
            "–∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–æ–ª—å—à–∞—è –ø—É—Å—Ç—ã–Ω—è –≤ –ê—Ñ—Ä–∏–∫–µ?",
            "- –°–∞—Ö+–∞—Ä–∞!",
            " - –æ—Ç–≤–µ—á–∞–µ—Ç –æ–¥–∏–Ω –º–∞–ª—å—á–∏–∫.",
            "- –û—Ç–ª–∏—á–Ω–æ, –∞ –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –≥–ª—É–±–æ–∫–∞—è –±–µ–∑–¥–Ω–∞ –≤ –æ–∫–µ–∞–Ω–µ?",
            "- –ë–µ—Ä–º—É–¥—Å–∫–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫!",
            " - –æ—Ç–≤–µ—á–∞–µ—Ç –¥—Ä—É–≥–æ–π.",
            "- –ù–µ—Ç-–Ω–µ—Ç",
            ", - –≥–æ–≤–æ—Ä–∏—Ç —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞,",
            " - —ç—Ç–æ –Ω–µ –±–µ–∑–¥–Ω–∞, –∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ.",
            f"–ò —Ç—É—Ç {self._name} –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —Ä—è–¥—É –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç:",
            f"- –ê! –Ø –∑–Ω–∞—é! –≠—Ç–æ {self._fruit}!",
            "–í–µ—Å—å –∫–ª–∞—Å—Å —Ä–∞—Å—Å–º–µ—è–ª—Å—è, –∞ —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –ø–æ–Ω—è–ª–∞, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑.",
            "",
            TextReply(
                f"- {self._fruit}? –ü—Ä—è–º–æ —Ç–∞–∫ –∏ {by_gender(self._name or '', '—Å–∫–∞–∑–∞–ª', '', '–∞', '–æ')}?",
                voice=Voice.ZAHAR_GPU,
            ),
            "- –î–∞, –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, —á–∏—Å—Ç–∞—è –ø—Ä–∞–≤–¥–∞.",
        )

        self.goto_next_step()


class InZooStory(Story):
    """
    –û–¥–Ω–∞–∂–¥—ã –≤ –ø–æ–ª–Ω–æ—á—å –≤ –∑–æ–æ–ø–∞—Ä–∫ —Ä–µ—à–∏–ª–∏ –Ω–∞–≤–µ–¥–∞—Ç—å—Å—è —Ç—Ä–æ–µ –¥—Ä—É–∑–µ–π - –í–∞—Å—è, –ü–µ—Ç—è –∏ –ú–∏—à–∞. –û–Ω–∏ –∑–∞–±—Ä–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ –∑–∞–±–æ—Ä, —á—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏, –∫–æ–≥–¥–∞ –≤—Å–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ —É–∂–µ —É—à–ª–∏.
    –í–Ω–µ–∑–∞–ø–Ω–æ, –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∑–æ–æ–ø–∞—Ä–∫–∞ - —Å—Ç—Ä–∞—à–Ω–∞—è —Å—Ç–∞—Ä—É—Ö–∞ —Å –∫–æ—Å–æ–π.
    –î—Ä—É–∑—å—è –≤ —É–∂–∞—Å–µ —Å–µ–ª–∏ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è —Å–∫–∞–º–µ–π–∫—É –∏ —Ç—É—Ç –∂–µ –ø—Ä–∏—Ç–≤–æ—Ä–∏–ª–∏—Å—å —Å—Ç–∞—Ç—É—è–º–∏, –Ω–∞–¥–µ—è—Å—å, —á—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∏—Ö –Ω–µ –∑–∞–º–µ—Ç–∏—Ç.
    –°—Ç–∞—Ä—É—Ö–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –∏–¥–µ—Ç –≤ –∏—Ö —Å—Ç–æ—Ä–æ–Ω—É, –æ—Å–º–∞—Ç—Ä–∏–≤–∞—è –ø—É—Å—Ç—É—é—â–∏–π –∑–æ–æ–ø–∞—Ä–∫. –ü–æ–¥–æ–π–¥—è –±–ª–∏–∂–µ, –æ–Ω–∞ –≥–ª—è–¥–∏—Ç –Ω–∞ "—Å—Ç–∞—Ç—É–∏" –∏ –∫—Ä–∏—á–∏—Ç: "–ê–≥–∞, —è –≤–∞—Å —Ä–∞–∑–æ–±–ª–∞—á—É!"
    –û–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –í–∞—Å–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "–¢—ã —Å—Ç–∞—Ç—É—è?"
    –í–∞—Å—è –Ω–µ –º–æ—Ä–≥–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–∫–æ—Ä—É—é —Ä—É–∫—É:
    - –Ω–µ—Ç, —è –Ω–æ—Å–æ—Ä–æ–≥ –¥–∞–∂–µ –µ—Å–ª–∏ —è –∏ –Ω–µ –¥–≤–∏–≥–∞—é—Å—å
    –°–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ —Ö–º—É—Ä–æ –∫–∏–≤–∞–µ—Ç –∏ –∏–¥–µ—Ç –∫ –ü–µ—Ç–µ:
    - –ê —Ç—ã —Å—Ç–∞—Ç—É—è?
    –ü–µ—Ç—è –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–æ–Ω:
    - –ù–µ—Ç, —è —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–π –ª–µ–æ–ø–∞—Ä–¥, –∏ –¥–∞–∂–µ –µ—Å–ª–∏ —è –∏ –Ω–µ –¥–≤–∏–≥–∞—é—Å—å, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —è –Ω–µ –µ–º.
    –°–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –Ω–∞ –º–∏–Ω—É—Ç—É –∑–∞–¥—É–º–∞–ª–∞—Å—å, –ø–æ—á–µ—Å–∞–ª–∞ –∫–æ—Å–æ–π –ø–æ –¥–µ—Ä–µ–≤—É, –∞ –∑–∞—Ç–µ–º –∏–¥–µ—Ç –∫ –ú–∏—à–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:
    - –¢–∞–∫ –∏ —Ç—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Ç–æ–∂–µ –Ω–µ —Å—Ç–∞—Ç—É—è?
    –ú–∏—à–∞ –æ—Ç–≤–µ—á–∞–µ—Ç:
    - –Ø, –ø—Ä–∞–≤–¥–∞, —Å—Ç–∞—Ç—É—è! –ù–æ –¥–æ —Å–∏—Ö –ø–æ—Ä –º–æ–≥ –Ω–∞–ø—É–≥–∞—Ç—å –≤–∞—Å —Å–≤–æ–∏–º –≥–∏–ø—Å–∞–∫–æ–º, –∫–æ–≥–¥–∞ –º–æ–∏ –¥—Ä—É–∑—å—è —É–∂–µ –æ—Ç–≤–µ—Ä–≥–∞–ª–∏ –≤–∞—Å.
    –°–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –≤—ã–¥–∞–ª–∞ –ª–∞—é—â–∏–π —Å–º–µ—Ö –∏ –∑–ª–æ—Å—Ç–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞ –ø–æ–∏—Å–∫ –≤–æ—Ä–∏—à–µ–∫. –ò —Ö–æ—Ç—è –¥—Ä—É–∑—å—è –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å —Å –ø—Ä–µ–≤—Ä–∞—Ç–Ω–æ—Å—Ç—è–º–∏ –∏ –æ–±–ª–∞–¥–∞–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è–º–∏, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–æ—á—å –Ω–∞ —Å–≤–æ–±–æ–¥–µ –±—ã–ª–æ –∂–∏–∑–Ω—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è —Å—Ç—Ä–∞—Ö –ø–æ–≤—Å—Ç—Ä–µ—á–∞—Ç—å —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü—É –≤ –ø–æ–ª–Ω–æ—á—å –∑–∞—Å—Ç–∞–≤–∏–ª –∏—Ö –≥–ª—É–±–æ–∫–æ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å –∏–¥–µ—é –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ–ø—Ä–µ–¥—É–º—ã—à–ª–µ–Ω–Ω—ã—Ö –Ω–æ—á–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –∑–æ–æ–ø–∞—Ä–∫–µ.
    """

    _animal: str
    _wild_animal: str
    _item: str

    def create_steps(self):
        return [
            self.make_step("–ù–∞–∑–æ–≤–∏ –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –∂–∏–≤–æ—Ç–Ω–æ–µ", self._fill_animal),
            self.make_step(
                "–¢–µ–ø–µ—Ä—å –Ω–∞–∑–æ–≤–∏ –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –∂–∏–≤–æ—Ç–Ω–æ–µ —Å –æ—Å—Ç—Ä—ã–º–∏ –∑—É–±–∞–º–∏",
                self._fill_wild_animal,
            ),
            self.make_step(
                "–ù–∞–∑–æ–≤–∏ –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –∏–ª–∏ –Ω–∞ —É–ª–∏—Ü–µ", self._fill_item
            ),
            self._tell_story,
        ]

    async def _fill_animal(self) -> bool:
        entities = self._api.input().entities()

        if entities:
            self._animal = entities[0].subject[0]

            return True

        return False

    async def _fill_wild_animal(self) -> bool:
        entities = self._api.input().entities()

        if entities:
            self._wild_animal = entities[0].subject[0]

            return True

        return False

    async def _fill_item(self) -> bool:
        entities = self._api.input().entities()

        if entities:
            self._item = entities[0].subject[0]

            return True

        return False

    def _tell_story(self) -> None:
        animal_ablt_plur = inflect(self._animal or "–Ω–æ—Å–æ—Ä–æ–≥", ({"ablt", "plur"},))
        item_ablt_plur = inflect(self._item or "—Å—Ç–∞—Ç—É—è", ({"ablt", "plur"},))

        self._api.say(
            "–í—Å–ø–æ–º–Ω–∏–ª–∞ –∏—Å—Ç–æ—Ä–∏—é.",
            "–û–¥–Ω–∞–∂–¥—ã –≤ –ø–æ–ª–Ω–æ—á—å –≤ –∑–æ–æ–ø–∞—Ä–∫ —Ä–µ—à–∏–ª–∏ –Ω–∞–≤–µ–¥–∞—Ç—å—Å—è —Ç—Ä–æ–µ –¥—Ä—É–∑–µ–π - –í–∞—Å—è, –ü–µ—Ç—è –∏ –ú–∏—à–∞.",
            f"–û–Ω–∏ –∑–∞–±—Ä–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ –∑–∞–±–æ—Ä, —á—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å {animal_ablt_plur}, –∫–æ–≥–¥–∞ –≤—Å–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ —É–∂–µ —É—à–ª–∏.",
            "–í–Ω–µ–∑–∞–ø–Ω–æ, –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∑–æ–æ–ø–∞—Ä–∫–∞ - —Å—Ç—Ä–∞—à–Ω–∞—è —Å—Ç–∞—Ä—É—Ö–∞ —Å –∫–æ—Å–æ–π.",
            f"–î—Ä—É–∑—å—è –≤ —É–∂–∞—Å–µ —Å–µ–ª–∏ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è —Å–∫–∞–º–µ–π–∫—É –∏ —Ç—É—Ç –∂–µ –ø—Ä–∏—Ç–≤–æ—Ä–∏–ª–∏—Å—å {item_ablt_plur}, –Ω–∞–¥–µ—è—Å—å, —á—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –∏—Ö –Ω–µ –∑–∞–º–µ—Ç–∏—Ç.",
            "",
            TextReply(
                f"- –ü—Ä–∏—Ç–≤–æ—Ä–∏–ª–∏—Å—å {item_ablt_plur}? –•–æ—Ç–µ–ª –±—ã —è –Ω–∞ —ç—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
                voice=Voice.ZAHAR_GPU,
            ),
            "- –û—Ç —Å—Ç—Ä–∞—Ö–∞ –µ—â—ë –Ω–µ —Ç–∞–∫ –ø—Ä–∏—Ç–≤–æ—Ä–∏—à—å—Å—è. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—ã–ª–æ –¥–∞–ª—å—à–µ?",
        )

        # üî• button –¥–∞–ª—å—à–µ

        @self._api.otherwise
        async def _():
            item_accs_plur = inflect(self._item or "—Å—Ç–∞—Ç—É—è", ({"accs", "plur"},))
            animal_adj = await add_random_adjective(self._animal, "nomn")
            wild_animal_adj = await add_random_adjective(self._wild_animal, "nomn")

            self._api.say(
                f"–°—Ç–∞—Ä—É—Ö–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –∏–¥–µ—Ç –≤ –∏—Ö —Å—Ç–æ—Ä–æ–Ω—É, –æ—Å–º–∞—Ç—Ä–∏–≤–∞—è –ø—É—Å—Ç—É—é—â–∏–π –∑–æ–æ–ø–∞—Ä–∫. –ü–æ–¥–æ–π–¥—è –±–ª–∏–∂–µ, –æ–Ω–∞ –≥–ª—è–¥–∏—Ç –Ω–∞ ¬´{item_accs_plur}¬ª –∏ –∫—Ä–∏—á–∏—Ç:",
                "-–ê–≥–∞! –Ø –≤–∞—Å —Ä–∞–∑–æ–±–ª–∞—á—É!",
                "–û–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –í–∞—Å–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:",
                f"- –¢—ã {self._item}?",
                "–í–∞—Å—è –Ω–µ –º–æ—Ä–≥–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–∫–æ—Ä—É—é —Ä—É–∫—É:"
                f"- –ù–µ—Ç, —è {animal_adj}, –¥–∞–∂–µ –µ—Å–ª–∏ —è –∏ –Ω–µ –¥–≤–∏–≥–∞—é—Å—å.",
                "–°—Ç–∞—Ä—É—Ö–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –ü–µ—Ç–µ:",
                f"- –ê —Ç—ã {self._item}?",
                "–ü–µ—Ç—è –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–æ–Ω:",
                f"- –ù–µ—Ç, —è {wild_animal_adj} –∏ –º–æ–≥—É –≤–∞—Å —É–∫—É—Å–∏—Ç—å.",
                "",
                TextReply(
                    "- –ù–∞–¥–µ—é—Å—å, –ü–µ—Ç—è –Ω–µ —É–∫—É—Å–∏–ª –±–µ–¥–Ω—É—é –±–∞–±—É—à–∫—É?",
                    voice=Voice.ZAHAR_GPU,
                ),
                "- –ö —Å—á–∞—Å—Ç—å—é, –Ω–µ—Ç, –Ω–µ —É–∫—É—Å–∏–ª. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—ã–ª–æ –¥–∞–ª—å—à–µ?",
            )

            @self._api.otherwise
            async def _():
                item_nomn_plur = inflect(self._item or "—Å—Ç–∞—Ç—É—è", ({"nomn", "plur"},))
                item_adj = await add_random_adjective(self._item, "nomn")
                common_item = by_gender(self._item, "–æ–±—ã—á–Ω", "—ã–π", "–∞—è", "–æ–µ")

                self._api.say(
                    "–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –Ω–∞ –º–∏–Ω—É—Ç—É –∑–∞–¥—É–º–∞–ª–∞—Å—å, –ø–æ—á–µ—Å–∞–ª–∞ –∫–æ—Å–æ–π –ø–æ –¥–µ—Ä–µ–≤—É, –∞ –∑–∞—Ç–µ–º –∏–¥–µ—Ç –∫ –ú–∏—à–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:",
                    f"- –¢–∞–∫ –∏ —Ç—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —Ç–æ–∂–µ –Ω–µ {self._item}?",
                    "–ú–∏—à–∞ –æ—Ç–≤–µ—á–∞–µ—Ç:",
                    f"- –Ø, –ø—Ä–∞–≤–¥–∞, {common_item} {item_adj}!",
                    "–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –æ—Ç –∑–ª–æ—Å—Ç–∏ –≤—ã–¥–∞–ª–∞ –∂—É—Ç–∫–∏–π –ª–∞—é—â–∏–π —Å–º–µ—Ö –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞ –ø–æ–∏—Å–∫ –≤–æ—Ä–∏—à–µ–∫.",
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è, —Å—Ç—Ä–∞—Ö –ø–æ–≤—Å—Ç—Ä–µ—á–∞—Ç—å —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω–∏—Ü—É –∑–∞—Å—Ç–∞–≤–∏–ª –∏—Ö –ø–æ–ª—É—á—à–µ –ø–æ–¥—É–º–∞—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –≥—É–ª—è—Ç—å –≤ –∑–æ–æ–ø–∞—Ä–∫–µ –Ω–æ—á—å—é.",
                    TextReply(
                        f"- –ñ—É—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è. –ú–Ω–µ —Ç–µ–ø–µ—Ä—å –≤—Å—é –Ω–æ—á—å –±—É–¥—É—Ç {item_nomn_plur} —Å–Ω–∏—Ç—å—Å—è.",
                        voice=Voice.ZAHAR_GPU,
                    ),
                    "- –î–∞. –î–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø–æ–π–º—É, –∫–∞–∫ –∏–º —É–¥–∞–ª–æ—Å—å –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å.",
                )

                self.goto_next_step()


@lru_cache(maxsize=64)
def get_dialog(session_id: str) -> Dialog:
    dialog = Dialog(stopwords=["–∞–ª–∏—Å–∞"])
    api = DialogAPI(dialog)

    stories: list[Story] = [AtLessonStory(api), InZooStory(api)]

    @api.new_session
    def _():
        api.say(
            "–ü—Ä–∏–≤–µ—Ç. –° —Ç–æ–±–æ–π —á–∞—Å—Ç–æ –ø—Ä–∏–∫–ª—é—á–∞—é—Ç—Å—è –≤–µ—Å—ë–ª—ã–µ –∏—Å—Ç–æ—Ä–∏–∏? –°–æ –º–Ω–æ–π ‚Äì –ø–æ—Å—Ç–æ—è–Ω–Ω–æ. –•–æ—á–µ—à—å, —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å?",
            "–ò—Å—Ç–æ—Ä–∏–π –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∏ –≤—Å–µ –æ–Ω–∏ ‚Äì —á–∏—Å—Ç–∞—è –ø—Ä–∞–≤–¥–∞. –ù–æ —á—Ç–æ–±—ã –∏—Ö –≤—Å–ø–æ–º–Ω–∏—Ç—å, –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å.",
            "–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –º–Ω–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –ù–∞—á–∏–Ω–∞–µ–º?",
        )

        # üî• button –¥–∞–ª—å—à–µ

        def end_current_story():
            api.say("–í–æ—Ç —Ç–∞–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è.")

            if stories:
                api.say("–•–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –µ—â—ë –æ–¥–Ω—É?")

                api.otherwise(start_next_story)
            else:
                api.say(
                    TextReply("–¢—É—Ç –∏ —Å–∫–∞–∑–∫–∏ –∫–æ–Ω–µ—Ü. –ê –∫—Ç–æ —Å–ª—É—à–∞–ª ‚Äì –º–æ–ª–æ–¥–µ—Ü", end=True)
                )

        def start_next_story():
            story = stories.pop(0)

            if story:
                story.start(end_current_story)
            else:
                api.say(
                    TextReply(
                        "–û–π! –ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –º–æ–ª–æ–∫–æ —É–±–µ–∂–∞–ª–æ! –ú–Ω–µ –ø–æ—Ä–∞. –ü–æ–∫–∞, –±–∞–≤—ã–π",
                        end=True,
                    )
                )

        api.otherwise(start_next_story)

    return dialog


"""


1. –ò–∑–≤–∏–Ω–∏, –æ—Ç–≤–ª–µ–∫—Å—è, –ø–æ–≤—Ç–æ—Ä–∏—à—å?
2. –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –°–∫–∞–∂–∏ –µ—â–µ —Ä–∞–∑?
3. –û–π, –∑–∞–¥—É–º–∞–ª—Å—è, –ø–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?
4. –ò–∑–≤–∏–Ω–∏, –Ω–µ —É–ª–æ–≤–∏–ª, –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?
5. –ü—Ä–æ—Å—Ç–∏, –ø—Ä–æ–ø—É—Å—Ç–∏–ª, —á—Ç–æ —Å–∫–∞–∑–∞–ª?
6. –ù–µ —Å–ª—ã—à–∞–ª, –º–æ–≥ –±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?
7. –û–ø—è—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–ª–µ–∫—Å—è.

Context: [ p:1989 c:145 t:2134 ]

¬© ChatGPT-4.0
"""
